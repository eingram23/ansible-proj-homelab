---
### VARS NEEDED: host_prefix
- name: Install k3s on first node
  hosts: "{{ host_prefix }}1.local.lan"
  gather_facts: false
  become: true
  become_method: sudo

  vars:
    # host_prefix: 
    k3s_token: "{{ host_prefix }}"
    k3s_version: "v1.24.7+k3s1"

  tasks:

    - name: Check if already installed
      ansible.builtin.stat:
        path: /usr/local/bin/k3s
      register: k3s_installed

    - name: Run k3s install script
      ansible.builtin.shell: >
        curl -sfL https://get.k3s.io | 
        INSTALL_K3S_VERSION={{ k3s_version }}
        K3S_TOKEN={{ host_prefix }} sh -s - server
        --disable=servicelb
        --write-kubeconfig-mode 644
        --cluster-init
      when: not k3s_installed.stat.exists

- name: Finish setup
  hosts: "{{ host_prefix }}[1-3].local.lan"
  gather_facts: false
  become: true
  become_method: sudo

  vars:
    # host_prefix: 
    k3s_token: "{{ host_prefix }}"
    k3s_version: "v1.24.7+k3s1"
  
  tasks:

    - name: Create folder for storing definition files for ansible to execute
      ansible.builtin.file:
        path: /opt/kubernetes/defs
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'

    - name: Install kubernetes python module
      ansible.builtin.pip:
        name: kubernetes

    - name: Disable firewall (RHEL/CentOS)
      ansible.builtin.systemd:
        name: firewalld
        state: stopped
        enabled: false

    - name: Check if already installed
      ansible.builtin.stat:
        path: /usr/local/bin/k3s
      register: k3s_installed

    - name: Run k3s install script
      ansible.builtin.shell: >
        curl -sfL https://get.k3s.io |
        INSTALL_K3S_VERSION={{ k3s_version }}
        K3S_TOKEN={{ host_prefix }} 
        sh -s - server --server https://{{ host_prefix }}1.local.lan:6443
        --disable=servicelb
        --write-kubeconfig-mode 644
      when: not k3s_installed.stat.exists
      throttle: 1

    - name: Install k3s service
      ansible.builtin.systemd:
        name: k3s
        enabled: true
        state: started

    - name: Check if helm is installed
      ansible.builtin.stat:
        path: /usr/local/bin/helm
      register: helm_bin

    - name: Install helm
      ansible.builtin.shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      when: not helm_bin.stat.exists
      register: install_result
      failed_when: install_result.rc != 1

    - name: Check if kustomize is installed
      ansible.builtin.stat:
        path: /usr/local/bin/kustomize
      register: kustomize_bin

    - name: Install kustomize
      ansible.builtin.shell: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        mv kustomize /usr/bin

    - name: Create longhorn mount point
      ansible.builtin.file:
        path: /longhorn
        state: directory
        mode: '0755'

    - name: Partition and format longhorn disks
      community.general.parted:
        device: /dev/sdb
        number: 1
        state: present
        fs_type: xfs

    - name: Create an xfs filesystem on /dev/sdb1
      community.general.filesystem:
        fstype: xfs
        dev: /dev/sdb1

    - name: Mount longhorn disks
      ansible.posix.mount:
        path: /var/lib/longhorn
        src: /dev/sdb1
        fstype: xfs
        state: mounted
